class Link {
    public long dData; // data item
    public Link next; // next link in list

    public Link(long dd) // constructor
    {
        dData = dd;
    }

    public void displayLink() // display this link
    {
        System.out.print(dData + " ");
    }
} // end class Link

class SortedList {
    private Link first; // ref to first item on list

    public SortedList() // constructor
    {
        first = null;
    }

    public boolean isEmpty() // true if no links
    {
        return (first == null);
    }

    public void insert(long key) // insert, in order
    {
        Link newLink = new Link(key); // make new link
        Link previous = null; // start at first
        Link current = first;

        while (current != null && key > current.dData) {
            previous = current;
            current = current.next;
        }

        if (previous == null)
            first = newLink;
        else
            previous.next = newLink;

        newLink.next = current;
    }

    public Link remove() // return & delete first link
    {
        Link temp = first;
        first = first.next;
        return temp;
    }

    public void displayList() {
        System.out.print("List (first-->last): ");
        Link current = first;
        while (current != null) {
            current.displayLink();
            current = current.next;
        }
        System.out.println();
    }
} // end class SortedList

public class SortedListApp {
    public static void main(String[] args) {
        SortedList theSortedList = new SortedList();
        theSortedList.insert(20);
        theSortedList.insert(40);
        theSortedList.displayList();
        theSortedList.insert(10);
        theSortedList.insert(30);
        theSortedList.insert(50);
        theSortedList.displayList();
        theSortedList.remove();
        theSortedList.displayList();
    }
}
